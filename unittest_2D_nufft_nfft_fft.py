# coding: utf-8

from pysap.plugins.mri.reconstruct_3D.fourier import NUFFT, NFFT3, FFT3
from pysap.plugins.mri.reconstruct.fourier import NFFT2, FFT2

import numpy as np
from pysap.plugins.mri.reconstruct_3D.utils import convert_mask_to_locations_3D
from pysap.plugins.mri.reconstruct.utils import convert_mask_to_locations
from modopt.math.metrics import mse
import matplotlib.pyplot as plt
from pysap.plugins.mri.parallel_mri.extract_sensitivity_maps import gridding_nd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm

# In[2]:
# _mask = np.ones(np.random.randint(2, size=(64, 64, 64)).shape)
# _samples = convert_mask_to_locations_3D(_mask)
# _samples_shift = convert_mask_to_locations_3D(np.fft.fftshift(_mask))
# image = np.load('/volatile/bsarthou/datas/NUFFT/mri_img_2D.npy')
# image = image[64:128, 64:128]
# images = np.tile(image, (64, 1, 1))

_mask = np.ones(np.random.randint(2, size=(512, 512)).shape)
_samples = convert_mask_to_locations(_mask)
_samples_shift = convert_mask_to_locations(np.fft.fftshift(_mask))
images = np.load('/volatile/bsarthou/datas/NUFFT/mri_img_2D.npy')
print(images.shape)
# In[3]:


fourier_op_dir_nufft = NUFFT(samples=_samples, platform='cpu',
                             shape=(512, 512), Kd=512, Jd=3)
fourier_op_dir_nfft = NFFT2(samples=_samples, shape=(512, 512))


# In[4]:


fourier_op_dir_fft = FFT2(samples=_samples_shift, shape=(512, 512))


# In[20]:
kspace_nfft = fourier_op_dir_nfft.op(images)
kspace_nufft = fourier_op_dir_nufft.op(images)
kspace_fft = np.fft.ifftshift(fourier_op_dir_fft.op(np.fft.fftshift(images)))
kspace_fft = kspace_fft.flatten()/np.sqrt(512*512)


# In[21]:


print(kspace_nufft.shape)
print(kspace_nfft.shape)
print(kspace_fft.shape)


# In[22]:
print(mse(kspace_nufft, kspace_nfft))
print(mse(kspace_nufft, kspace_fft))
print(mse(kspace_nfft, kspace_fft))
print(kspace_nfft.max())
print(kspace_fft.max())


# In[23]:

# plt.subplot(311)
# plt.plot(np.abs(kspace_nufft))
# plt.subplot(312)
# plt.plot(np.abs(kspace_nfft))
# plt.subplot(313)
# plt.plot(np.abs(kspace_fft))


# In[24]:

#
# plt.figure()
# plt.plot(np.abs(kspace_nufft - kspace_nfft))
# plt.figure()
# plt.plot(np.abs(kspace_nfft - kspace_fft))
# plt.figure()
# plt.plot(np.abs(kspace_nufft - kspace_fft))


# 3D plot
print("regridding")
k_space_fft_3D = gridding_nd(_samples_shift, kspace_fft, (512, 512))
k_space_nfft_3D = gridding_nd(_samples, kspace_nfft, (512, 512))
k_space_nufft_3D = gridding_nd(_samples, kspace_nufft, (512, 512))
print('regridding done')

fig = plt.figure()
fig.suptitle('Comparaison of the k-space generated by Fourier transform on a'
             ' 512 squared image of a brain')
ax1 = fig.add_subplot(121, projection='3d')
ax2 = fig.add_subplot(122, projection='3d', sharez=ax1)

X, Y = np.meshgrid(np.arange(k_space_fft_3D.shape[0]),
                   np.arange(k_space_fft_3D.shape[1]))

ax1.set_title('FFT vs NFFT \n on 512*512 image\n MSE={:.4E}'.format(mse(
                                                    kspace_nfft, kspace_fft)))
ax1.plot_surface(X, Y, np.abs(k_space_fft_3D-k_space_nfft_3D),
                 cmap=cm.coolwarm, linewidth=0, antialiased=False)


ax2.set_title('FFT vs NUFFT \n on 512*512 image\n MSE={:.4E}'.format(mse(
                                                    kspace_nufft, kspace_fft)))
surf = ax2.plot_surface(X, Y, np.abs(k_space_fft_3D-k_space_nufft_3D),
                        cmap=cm.coolwarm,
                        linewidth=0, antialiased=False)

# Add a color bar which maps values to colors.
fig.colorbar(surf, shrink=0.5, aspect=5)

plt.show()
